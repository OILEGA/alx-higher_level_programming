import unittest
from typing import List


class MyList(list):
    def print_sorted(self) -> List[int]:
        sorted_list = sorted(self)
        print(sorted_list)
        return sorted_list


class TestMyList(unittest.TestCase):

    def test_module_docstring(self):
        self.assertTrue(len(__import__("1-my_list").__doc__) > 1)

    def test_class_docstring(self):
        self.assertTrue(len(MyList.__doc__) > 1)

    def test_method_docstring(self):
        self.assertTrue(len(MyList.print_sorted.__doc__) > 1)

    def test_inheritance(self):
        self.assertTrue(issubclass(MyList, list))

    def test_empty_list(self):
        my_list = MyList()
        self.assertEqual(my_list.print_sorted(), [])

    def test_append(self):
        my_list = MyList()
        my_list.append(5)
        my_list.append(1)
        my_list.append(3)
        my_list.append(2)
        self.assertEqual(my_list.print_sorted(), [1, 2, 3, 5])

    def test_already_sorted(self):
        my_list = MyList()
        my_list.append(1)
        my_list.append(2)
        my_list.append(3)
        my_list.append(4)
        self.assertEqual(my_list.print_sorted(), [1, 2, 3, 4])

    def test_reversed_order(self):
        my_list = MyList()
        my_list.append(4)
        my_list.append(3)
        my_list.append(2)
        my_list.append(1)
        self.assertEqual(my_list.print_sorted(), [1, 2, 3, 4])
        self.assertEqual(my_list, [4, 3, 2, 1])

    def test_negative_numbers(self):
        my_list = MyList()
        my_list.append(-1)
        my_list.append(-5)
        my_list.append(3)
        my_list.append(2)
        self.assertEqual(my_list.print_sorted(), [-5, -1, 2, 3])
        self.assertEqual(my_list, [-1, -5, 3, 2])

    def test_too_many_arguments(self):
        my_list = MyList()
        with self.assertRaises(TypeError):
            my_list.print_sorted(1)

